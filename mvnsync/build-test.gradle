apply plugin: 'groovy'
apply plugin: 'eclipse'

project.ext.mainClassName="mvnsync"

repositories {
    // Where to get the dependencies from
    mavenCentral()
}

dependencies {
    // All dependencies are groovy compile / runtime dependencies
    groovy 'org.codehaus.groovy:groovy-all:2.0.0'
	groovy 'org.apache.ivy:ivy:2.2.0'
	
	compile 'org.codehaus.groovy:groovy-all:2.0.0'
	compile 'org.apache.ivy:ivy:2.2.0' 
	compile 'org.apache.lucene:lucene-core:4.0.0'
    compile 'org.apache.lucene:lucene-queryparser:4.0.0'
    compile 'org.apache.lucene:lucene-analyzers-common:4.0.0'
    compile 'org.apache.lucene:lucene-queries:4.0.0'
    compile 'org.apache.maven.indexer:indexer-artifact:5.1.1'
    compile 'org.apache.maven.indexer:indexer-core:5.1.1'
    compile 'org.apache.maven.indexer:maven-indexer:5.1.1'
    compile 'org.apache.maven.indexer:indexer-cli:5.1.1'
    compile 'org.apache.maven.wagon:wagon-provider-api:2.4'
    compile 'org.apache.maven.wagon:wagon-http:2.4'
    compile 'org.codehaus.plexus:plexus:3.3.1'
    compile 'org.codehaus.plexus:plexus-utils:3.0.10'
    compile 'org.codehaus.plexus:plexus-classworlds:2.4.2'
    compile 'org.codehaus.plexus:plexus-container-default:1.5.5'
    compile 'org.sonatype.aether:aether-api:1.13.1'
    compile 'commons-logging:commons-logging:1.1.3'
}

task uberjar(type: Jar, dependsOn:[':compileGroovy']) {
	// Get the compiled source
	from files(sourceSets.main.output.classesDir)
	
	// Get the Groovy dependencies
	from( configurations.runtime.asFileTree.files.collect { it.isDirectory() ? it : zipTree(it) }){
		// Need this or it will error with:
		// "Invalid signature file digest for Manifest main attributes"
		//exclude 'META-INF/*.SF'
		//exclude 'META-INF/*.DSA'
		//exclude 'META-INF/*.RSA'
		exclude 'META-INF/*'
	}

	// Specifiy which class to run ( name of groovy script or class with main in it)
	manifest {
		attributes 'Main-Class': mainClassName
		//println configurations.runtime.collect { File file -> file.getPath() }.join("\n")
		//attributes 'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
	}
}

jar {
    from files(sourceSets.main.output.classesDir)

	manifest {
		attributes 'Main-Class': mainClassName
		//attributes 'Class-Path': "libs"
	}
}
